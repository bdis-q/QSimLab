diff --git a/qsim/svsim.cpp b/qsim/svsim.cpp
index 94ab6e2..b846778 100644
--- a/qsim/svsim.cpp
+++ b/qsim/svsim.cpp
@@ -47,17 +47,17 @@ void svsimForGate(Matrix<DTYPE>& sv, QGate& gate) {
         (3) If there are 'gate.numTargets()' target qubits, there are 'numAmps' amplitudes. 
     */
     vector<ll> strides;
-    cout << "[TODO] Calculate the strides for the involved amplitudes. " << endl;
-    exit(1);
-
-
-
-
-
-
-
-
-
+    // cout << "[TODO] Calculate the strides for the involved amplitudes." << endl;
+    // exit(1);
+    for (ll idx = 0; idx < numAmps; ++ idx) {
+        ll stride = 0;
+        for (int j = 0; j < gate.numTargets(); ++ j) {
+            if (idx & (1 << j)) { // if the j-th bit of idx is 1
+                stride += (1 << gate.targetQubits[j]);
+            }
+        }
+        strides.push_back(stride);
+    }
     // ///////////////////////////////////////////////////////////
 
     // 2. Iterate over all amplitudes
@@ -66,16 +66,16 @@ void svsimForGate(Matrix<DTYPE>& sv, QGate& gate) {
         if (isAccessed[ampidx]) continue;
 
         // [TODO] 2.2. Save the involved amplitudes to amps_vec and mark them as accessed
-        cout << "[TODO] Save the involved amplitudes to amps_vec and mark them as accessed. " << endl;
-        exit(1);
-
-
-
-
-
-
-
-
+        // cout << "[TODO] Save the involved amplitudes to amps_vec and mark them as accessed." << endl;
+        // exit(1);
+        for (ll idx = 0; idx < numAmps; ++ idx) {
+            if (ampidx + strides[idx] >= sv.row) {
+                cout << "[ERROR] Exceed the length of the state vector." << endl;
+                exit(1);
+            }
+            amps_vec.data[idx][0] = sv.data[ampidx + strides[idx]][0];
+            isAccessed[ampidx + strides[idx]] = true;
+        }
         // ///////////////////////////////////////////////////////////
 
         // 3. Check the control bits of the current amplitude
@@ -106,14 +106,14 @@ bool isLegalControlPattern(ll ampidx, QGate& gate) {
     for (int i = 0; i < gate.numControls(); ++ i) {
         // [TODO] Check the control qubits of the gate ////////////////
         // [HINT] If the i-th bit of amp is 0 and q_i is a |1> control qubit of gate, return false. 
-        cout << "[TODO] Check the control qubits of the gate." << endl;
-        exit(1);
-
-
-
-
-
-
+        // cout << "[TODO] Check the control qubits of the gate." << endl;
+        // exit(1);
+        ctrl = gate.controlQubits[i];
+        ctrlmask = (1 << ctrl);
+        // 1-controlled and the control qubit of amp is 0
+        if ((ampidx & ctrlmask) == 0) {
+            return false;
+        }
         // ///////////////////////////////////////////////////////////
     }
     return true;
